{"ast":null,"code":"var _jsxFileName = \"/Users/vinaygaddam/BuyWise/project/frontend/src/CreateGroup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './CreateGroup.css';\nimport ObjectID from 'bson-objectid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateGroup() {\n  _s();\n  const navigate = useNavigate();\n  // Add state variables for the form inputs\n  const [groupName, setGroupName] = useState('');\n  const [description, setDescription] = useState('');\n  const [startingMoney, setStartingMoney] = useState('');\n  const [userEmails, setUserEmails] = useState('');\n  const {\n    username\n  } = useParams();\n  const validateName = accountName => {\n    if (!accountName || accountName.trim() === '') {\n      throw new Error(\"account name cannot be empty\");\n    }\n  };\n  const validateBalance = balance => {\n    if (!balance || balance.trim() === '') {\n      throw new Error(\"Value cannot be empty\");\n    }\n    if (balance < 0) {\n      throw new Error(\"Value cannot be negative\");\n    }\n    if (!/^\\d+(\\.\\d+)?$/.test(balance.trim())) {\n      throw new Error(\"Value is not a number\");\n    }\n  };\n  const validateUserList = async (users, username) => {\n    if (!users.trim()) {\n      return username;\n    }\n    if (/\\s/.test(users)) {\n      throw new Error(\"User list cannot contain spaces\");\n    }\n    if (/,{2,}|,$/.test(users)) {\n      throw new Error(\"Invalid input: Multiple consecutive commas or comma at the end\");\n    }\n    users += \",\" + username;\n    let splitArray = users.split(\",\");\n    for (const user of splitArray) {\n      if (!(await checkUsernameExists(user.trim()))) {\n        throw new Error(`User does not exist`);\n      }\n    }\n    return users;\n  };\n  const checkUsernameExists = async username => {\n    try {\n      const response = await fetch(`http://localhost:5050/username/${username}`);\n      return response.ok; // Returns true if user exists, false otherwise\n    } catch (error) {\n      console.error(\"Error checking user existence:\", error.message);\n      throw new Error(\"Failed to check user existence\");\n    }\n  };\n  async function addUserGroup(username, accountName, balance, id) {\n    try {\n      const response = await fetch(`http://localhost:5050/update/addAccount/${username}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"newAccount\": {\n            \"name\": accountName,\n            _id: id,\n            \"balance\": parseFloat(balance)\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add group\");\n      }\n      const data = await response.json();\n      return data.groupID;\n    } catch (error) {\n      console.error(\"Error adding group:\", error.message);\n      throw error;\n    }\n  }\n  const addGroup = async (username, accountName, balance, users) => {\n    try {\n      validateName(accountName);\n      validateBalance(balance);\n      let userList;\n      userList = await validateUserList(users, username);\n      let ID = new ObjectID();\n      let allUsers = userList.split(\",\");\n      for (const user of allUsers) {\n        await addUserGroup(user, accountName, balance, ID);\n      }\n      return ID;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const handleCreateGroup = async e => {\n    e.preventDefault();\n    const objID = new ObjectID();\n    const stringObjID = objID.toString();\n    console.log({\n      stringObjID,\n      username,\n      groupName,\n      description,\n      startingMoney,\n      userEmails\n    });\n    try {\n      //await addGroup (username , groupName , startingMoney , userEmails);\n    } catch (error) {}\n  };\n  const goBack = () => {\n    navigate(-1); // Go back to the previous page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-group-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateGroup,\n      className: \"create-group-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter group name\",\n        value: groupName,\n        onChange: e => setGroupName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Group description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter starting money\",\n        value: startingMoney,\n        onChange: e => setStartingMoney(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Add users by username\",\n        value: userEmails,\n        onChange: e => setUserEmails(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"create-group-button\",\n        children: \"Create Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      className: \"back-button\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateGroup, \"dGs8+nEccjGDFQwes+cKQhNdOM4=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = CreateGroup;\nexport default CreateGroup;\nvar _c;\n$RefreshReg$(_c, \"CreateGroup\");","map":{"version":3,"names":["React","useState","useNavigate","useParams","ObjectID","jsxDEV","_jsxDEV","CreateGroup","_s","navigate","groupName","setGroupName","description","setDescription","startingMoney","setStartingMoney","userEmails","setUserEmails","username","validateName","accountName","trim","Error","validateBalance","balance","test","validateUserList","users","splitArray","split","user","checkUsernameExists","response","fetch","ok","error","console","message","addUserGroup","id","method","headers","body","JSON","stringify","_id","parseFloat","data","json","groupID","addGroup","userList","ID","allUsers","handleCreateGroup","e","preventDefault","objID","stringObjID","toString","log","goBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/Users/vinaygaddam/BuyWise/project/frontend/src/CreateGroup.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate , useParams } from 'react-router-dom';\nimport './CreateGroup.css';\nimport ObjectID from 'bson-objectid';\n\nfunction CreateGroup() {\n  const navigate = useNavigate();\n  // Add state variables for the form inputs\n  const [groupName, setGroupName] = useState('');\n  const [description, setDescription] = useState('');\n  const [startingMoney, setStartingMoney] = useState('');\n  const [userEmails, setUserEmails] = useState('');\n  const { username } = useParams();\n\n  const validateName = (accountName) => {\n    if (!accountName || accountName.trim() === '') {\n        throw new Error(\"account name cannot be empty\");\n      }\n}\n\nconst validateBalance = (balance) => {\n    if (!balance || balance.trim() === '') {\n        throw new Error(\"Value cannot be empty\");\n    }\n\n    if (balance < 0){\n        throw new Error(\"Value cannot be negative\");\n    }\n    \n    if (!/^\\d+(\\.\\d+)?$/.test(balance.trim())) {\n        throw new Error(\"Value is not a number\");\n    }\n    \n}\n\nconst validateUserList = async (users, username) => {\n    if (!users.trim()) {\n        return username;\n    }\n\n    if (/\\s/.test(users)) {\n        throw new Error(\"User list cannot contain spaces\");\n    }\n\n    if (/,{2,}|,$/.test(users)) {\n        throw new Error(\"Invalid input: Multiple consecutive commas or comma at the end\");\n    }\n\n\n    users += \",\" + username;\n\n    let splitArray = users.split(\",\");\n\n    for (const user of splitArray){\n        if (!await checkUsernameExists(user.trim())) {\n            throw new Error(`User does not exist`);\n        }\n    }\n\n    return users;\n}\n\nconst checkUsernameExists = async (username) => {\n    try {\n        const response = await fetch(`http://localhost:5050/username/${username}`);\n        return response.ok; // Returns true if user exists, false otherwise\n    } catch (error) {\n        console.error(\"Error checking user existence:\", error.message);\n        throw new Error(\"Failed to check user existence\");\n    }\n}\n\n\nasync function addUserGroup(username , accountName , balance , id){\n   \n\n    try {\n        const response = await fetch(`http://localhost:5050/update/addAccount/${username}` , {\n            method : \"PATCH\",\n            headers: {\n                \"Content-type\" : \"application/json\"\n            },\n            body : JSON.stringify({\n                \"newAccount\" : {\n                \"name\" : accountName,\n                _id : id,\n                \"balance\" : parseFloat(balance),\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to add group\");\n          }\n          const data  = await response.json();\n          return data.groupID;\n          \n        } catch (error) {\n          console.error(\"Error adding group:\", error.message);\n          throw error;\n}\n}\n\nconst addGroup = async (username , accountName , balance, users) => {\n    try {\n        validateName(accountName);\n        validateBalance(balance);\n        let userList;\n        userList = await validateUserList(users , username);\n        let ID = new ObjectID();\n        let allUsers = userList.split(\",\");\n        for (const user of allUsers){\n            await addUserGroup(user , accountName , balance  , ID);\n        }\n        return ID;\n    } catch (error) {\n        throw error;\n    }\n}\n\n  const handleCreateGroup = async (e) => {\n    e.preventDefault();\n    const objID = new ObjectID();\n    const stringObjID = objID.toString();\n    console.log({\n      stringObjID,\n      username,\n      groupName,\n      description,\n      startingMoney,\n      userEmails\n    });\n\n    try {\n      //await addGroup (username , groupName , startingMoney , userEmails);\n    } catch (error) {\n      \n    }\n    \n  };\n\n  const goBack = () => {\n    navigate(-1); // Go back to the previous page\n  };\n\n  return (\n    <div className=\"create-group-container\">\n      <h2>Create Group</h2>\n      <form onSubmit={handleCreateGroup} className=\"create-group-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter group name\"\n          value={groupName}\n          onChange={(e) => setGroupName(e.target.value)}\n          required\n        />\n        <textarea\n          placeholder=\"Group description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          required\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Enter starting money\"\n          value={startingMoney}\n          onChange={(e) => setStartingMoney(e.target.value)}\n          required\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Add users by username\"\n          value={userEmails}\n          onChange={(e) => setUserEmails(e.target.value)}\n          required\n        />\n        <button type=\"submit\" className=\"create-group-button\">Create Group</button>\n      </form>\n      <button onClick={goBack} className=\"back-button\">Back</button>\n    </div>\n  );\n}\n\nexport default CreateGroup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}