{"ast":null,"code":"var _jsxFileName = \"/Users/vinaygaddam/BuyWise/project/frontend/src/auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    try {\n      if (!username || !password) {\n        throw new Error(\"Username or password cannot be empty\");\n      }\n      const response = await fetch(`http://localhost:5050/user/${username}/${password}`);\n      if (response.status === 404) {\n        throw new Error(\"Username or Password mismatch\");\n      }\n      console.log(\"success\");\n      navigate('../html/main.html');\n    } catch (error) {\n      console.error(error);\n      // Handle error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"IIPwWddbiEHHD7aoL5eQeOR7fTk=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nconst SignupForm = () => {\n  _s2();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const navigate = useNavigate();\n  const handleSignup = async () => {\n    try {\n      if (!username || !password || !confirmPassword) {\n        throw new Error(\"All fields are required\");\n      }\n      // Validation functions for username and password can be called here\n      await validateUsername(username);\n      validatePassword(password, confirmPassword);\n      await addUser(username, password);\n      console.log(\"success\");\n      navigate('../html/login.html');\n    } catch (error) {\n      console.error(error);\n      // Handle error\n    }\n  };\n\n  // Function to validate the username\n  const validateUsername = async username => {\n    // Check if username is null or empty\n    if (!username || username.trim() === '') {\n      throw new Error(\"Username cannot be empty\");\n    }\n    const usernamePattern = /^(?=.*[a-zA-Z])(?=.*\\d)[^\\s]{5,}$/;\n    if (!usernamePattern.test(username)) {\n      throw new Error(\"Username must be 5+ characters, contain at least one number, one letter, and no spaces\");\n    }\n    try {\n      const response = await fetch(`http://localhost:5050/username/${username}`);\n      if (response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      if (error instanceof TypeError) {\n        // Network error/failed to fetch\n        throw new Error(\"Failed to fetch username information\");\n      } else if (error instanceof Error) {\n        // Username exists in the database\n        throw new Error(\"Username exists in the database\");\n      }\n    }\n  };\n\n  // Function to validate the password and confirm password\n  const validatePassword = (password, confirmPassword) => {\n    if (!password || password.trim() === '') {\n      throw new Error(\"Password cannot be empty\");\n    }\n    const passwordPattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{8,14}$/;\n    if (!passwordPattern.test(password)) {\n      throw new Error(\"Password must be 8-14 characters, contain at least one number, one uppercase letter, one lowercase letter, one special character, and no spaces\");\n    }\n    if (password !== confirmPassword) {\n      throw new Error(\"Passwords do not match\");\n    }\n  };\n  async function addUser(username, password) {\n    const userData = {\n      username: username,\n      password: password,\n      groups: []\n    };\n    try {\n      const response = await fetch(\"http://localhost:5050/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add user\");\n      }\n      const data = await response.json();\n      return data.user;\n    } catch (error) {\n      console.error(\"Error adding user:\", error.message);\n      throw error;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Confirm Password\",\n      value: confirmPassword,\n      onChange: e => setConfirmPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSignup,\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s2(SignupForm, \"z+4ZjZgef9yfPF00ZCUTjY+rvUU=\", false, function () {\n  return [useNavigate];\n});\n_c2 = SignupForm;\nconst Auth = () => {\n  _s3();\n  const [isLogin, setIsLogin] = useState(true);\n  const switchForm = () => {\n    setIsLogin(!isLogin);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLogin ? /*#__PURE__*/_jsxDEV(LoginForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(SignupForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchForm,\n      children: isLogin ? \"Switch to Sign Up\" : \"Switch to Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s3(Auth, \"juHMKC6x2j1wnRvCiB5VrABnZyE=\");\n_c3 = Auth;\nexport default Auth;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LoginForm\");\n$RefreshReg$(_c2, \"SignupForm\");\n$RefreshReg$(_c3, \"Auth\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginForm","_s","username","setUsername","password","setPassword","navigate","handleLogin","Error","response","fetch","status","console","log","error","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","SignupForm","_s2","confirmPassword","setConfirmPassword","handleSignup","validateUsername","validatePassword","addUser","trim","usernamePattern","test","ok","TypeError","passwordPattern","userData","groups","method","headers","body","JSON","stringify","data","json","user","message","_c2","Auth","_s3","isLogin","setIsLogin","switchForm","_c3","$RefreshReg$"],"sources":["/Users/vinaygaddam/BuyWise/project/frontend/src/auth.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst LoginForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      if (!username || !password) {\n        throw new Error(\"Username or password cannot be empty\");\n      }\n      const response = await fetch(`http://localhost:5050/user/${username}/${password}`);\n      if (response.status === 404) {\n        throw new Error(\"Username or Password mismatch\");\n      }\n      console.log(\"success\");\n      navigate('../html/main.html');\n    } catch (error) {\n      console.error(error);\n      // Handle error\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button onClick={handleLogin}>Login</button>\n    </div>\n  );\n};\n\nconst SignupForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const navigate = useNavigate();\n\n  const handleSignup = async () => {\n    try {\n      if (!username || !password || !confirmPassword) {\n        throw new Error(\"All fields are required\");\n      }\n      // Validation functions for username and password can be called here\n      await validateUsername(username);\n      validatePassword(password, confirmPassword);\n      await addUser(username, password);\n      console.log(\"success\");\n      navigate('../html/login.html');\n    } catch (error) {\n      console.error(error);\n      // Handle error\n    }\n  };\n\n  // Function to validate the username\nconst validateUsername = async (username) => {\n  // Check if username is null or empty\n  if (!username || username.trim() === '') {\n    throw new Error(\"Username cannot be empty\");\n  }\n  const usernamePattern = /^(?=.*[a-zA-Z])(?=.*\\d)[^\\s]{5,}$/;\n  if(!usernamePattern.test(username)){\n    throw new Error(\"Username must be 5+ characters, contain at least one number, one letter, and no spaces\");\n\n  }\n  try {\n      const response = await fetch(`http://localhost:5050/username/${username}`);\n      if (response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n  } catch (error) {\n      if (error instanceof TypeError) {\n          // Network error/failed to fetch\n          throw new Error(\"Failed to fetch username information\");\n      } else if (error instanceof Error) {\n          // Username exists in the database\n          throw new Error(\"Username exists in the database\");\n      }\n  }\n}; \n\n// Function to validate the password and confirm password\nconst validatePassword = (password, confirmPassword) => {\n\n  if (!password || password.trim() === '') {\n    throw new Error(\"Password cannot be empty\");\n  }\n\n  const passwordPattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{8,14}$/;\n  if (!passwordPattern.test(password)) {\n    throw new Error(\"Password must be 8-14 characters, contain at least one number, one uppercase letter, one lowercase letter, one special character, and no spaces\");\n  }\n\n  if (password !== confirmPassword) {\n    throw new Error(\"Passwords do not match\");\n  }\n};\n\nasync function addUser(username , password){\n  const userData = {\n      username : username,\n      password : password,\n      groups : [\n  ]\n  };\n  try {\n      const response = await fetch(\"http://localhost:5050/users\" , {\n          method : \"POST\",\n          headers: {\n              \"Content-type\" : \"application/json\"\n          },\n          body : JSON.stringify(userData)\n      });\n\n      if (!response.ok) {\n          throw new Error(\"Failed to add user\");\n        }\n    \n        const data = await response.json();\n        return data.user;\n      } catch (error) {\n        console.error(\"Error adding user:\", error.message);\n        throw error;\n  }\n}\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Confirm Password\"\n        value={confirmPassword}\n        onChange={(e) => setConfirmPassword(e.target.value)}\n      />\n      <button onClick={handleSignup}>Sign Up</button>\n    </div>\n  );\n};\n\nconst Auth = () => {\n  const [isLogin, setIsLogin] = useState(true);\n\n  const switchForm = () => {\n    setIsLogin(!isLogin);\n  };\n\n  return (\n    <div>\n      {isLogin ? <LoginForm /> : <SignupForm />}\n      <button onClick={switchForm}>{isLogin ? \"Switch to Sign Up\" : \"Switch to Login\"}</button>\n    </div>\n  );\n};\n\nexport default Auth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}